# name: Deploy to Staging Environments

# on:
#   push:
#     branches:
#       - 'release/v*' # Trigger on push to any branch matching release/v* (e.g., release/v1.0.0)

# env:
#   # Define the base API URL for your staging environment
#   STAGING_API_URL: https://api.your-staging-domain.com # <<< REPLACE WITH YOUR ACTUAL STAGING API URL
#   STAGING_SUPABASE_PROJECT_ID: your-staging-supabase-project-id # <<< REPLACE

# jobs:
#   deploy-nextjs-staging:
#     runs-on: ubuntu-latest
#     environment: staging # Associate with a GitHub Environment for better tracking/protection
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '22'
#           cache: 'yarn'

#       - name: Install Dependencies
#         run: yarn install --frozen-lockfile

#       - name: Turborepo Cache
#         uses: actions/cache@v4
#         with:
#           path: .turbo
#           key: ${{ runner.os }}-turbo-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-turbo-

#       - name: Build Next.js App
#         run: yarn build --filter=apps/nextjs
#         env:
#           NEXT_PUBLIC_API_URL: ${{ env.STAGING_API_URL }}
#           # Pass other staging-specific env vars for Next.js
#           # SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
#           # SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}

#       - name: Deploy Next.js App to Staging Vercel
#         uses: vercel/actions/deploy@v2
#         with:
#           token: ${{ secrets.VERCEL_TOKEN }}
#           teamId: ${{ secrets.VERCEL_ORG_ID }}
#           projectId: ${{ secrets.VERCEL_NEXTJS_STAGING_PROJECT_ID }} # Use a dedicated Staging project ID
#           prod: false # Ensures it's not a production deployment in Vercel

#   deploy-expo-staging-build:
#     runs-on: ubuntu-latest
#     environment: staging
#     needs: [deploy-nextjs-staging] # Ensure Next.js staging API is ready
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '22'
#           cache: 'yarn'

#       - name: Install Dependencies
#         run: yarn install --frozen-lockfile

#       - name: Turborepo Cache
#         uses: actions/cache@v4
#         with:
#           path: .turbo
#           key: ${{ runner.os }}-turbo-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-turbo-

#       - name: Run EAS Build for Staging (iOS & Android)
#         uses: expo/expo-github-action@v8
#         with:
#           expo-token: ${{ secrets.EXPO_TOKEN }}
#           command: eas build --profile preview --platform all # Use your 'preview' profile for staging builds
#           working-directory: apps/expo # Adjust to your Expo app path

#       - name: Output EAS Build URLs (for QA)
#         run: |
#           echo "EAS Staging Build Triggered for branch ${{ github.ref_name }}. Check Expo dashboard for links."
#           # You might use 'eas build:list --status finished --latest --json' to programmatically get URLs and add them to a PR comment or issue tracker.

#   run-supabase-migrations-staging:
#     runs-on: ubuntu-latest
#     environment: staging
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Supabase CLI
#         uses: supabase/setup-cli@v1
#         with:
#           version: latest

#       - name: Set Supabase Access Token
#         run: supabase login --access-token ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Link to Staging Supabase Project
#         run: supabase link --project-ref ${{ env.STAGING_SUPABASE_PROJECT_ID }} --org-id ${{ secrets.SUPABASE_ORG_ID }}
#         working-directory: packages/api/supabase # Adjust path to your migrations folder

#       - name: Apply Staging Database Migrations
#         # For staging, 'db push' is often fine. For production, be more cautious.
#         run: supabase db push
#         working-directory: packages/api/supabase
#         env:
#           PGPASSWORD: ${{ secrets.STAGING_SUPABASE_DB_PASSWORD }} # Example