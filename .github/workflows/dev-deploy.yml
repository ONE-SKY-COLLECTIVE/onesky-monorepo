# name: Deploy to Development Environments

# on:
#   push:
#     branches:
#       - develop

# env:
#   # Define the base API URL for your development environment
#   DEV_API_URL: https://api.your-dev-domain.com # <<< REPLACE WITH YOUR ACTUAL DEV API URL
#   DEV_SUPABASE_PROJECT_ID: your-dev-supabase-project-id # <<< REPLACE

# jobs:
#   deploy-nextjs:
#     runs-on: ubuntu-latest
#     environment: development # Associate with a GitHub Environment for better tracking/protection
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '22'
#           cache: 'yarn'

#       - name: Install Dependencies
#         run: yarn install --frozen-lockfile

#       # Turborepo Cache (Optional but Recommended)
#       - name: Turborepo Cache
#         uses: actions/cache@v4
#         with:
#           path: .turbo
#           key: ${{ runner.os }}-turbo-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-turbo-

#       - name: Build Next.js App
#         run: yarn build --filter=apps/nextjs # Builds only the Next.js app
#         env:
#           NEXT_PUBLIC_API_URL: ${{ env.DEV_API_URL }} # Pass the dev API URL to the build
#           # Add other Next.js specific env vars (e.g., Supabase keys for Next.js server actions if used)
#           # SUPABASE_URL: ${{ secrets.DEV_SUPABASE_URL }}
#           # SUPABASE_ANON_KEY: ${{ secrets.DEV_SUPABASE_ANON_KEY }}

#       - name: Deploy Next.js App to Development Vercel
#         uses: vercel/actions/deploy@v2
#         with:
#           token: ${{ secrets.VERCEL_TOKEN }}
#           teamId: ${{ secrets.VERCEL_ORG_ID }}
#           projectId: ${{ secrets.VERCEL_NEXTJS_DEV_PROJECT_ID }} # Use a dedicated Dev project ID
#           prod: false # This ensures it's a non-production deployment on Vercel
#           # build-env: |
#           #   NEXT_PUBLIC_API_URL=${{ env.DEV_API_URL }} # You can also pass env vars here if needed
#           #   ...

#   deploy-expo-dev-build:
#     runs-on: ubuntu-latest
#     environment: development
#     needs: [deploy-nextjs] # Ensure Next.js is deployed first so API is ready
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '22'
#           cache: 'yarn'

#       - name: Install Dependencies
#         run: yarn install --frozen-lockfile

#       # Turborepo Cache (Optional but Recommended)
#       - name: Turborepo Cache
#         uses: actions/cache@v4
#         with:
#           path: .turbo
#           key: ${{ runner.os }}-turbo-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-turbo-

#       - name: Run EAS Build for Development (iOS & Android)
#         uses: expo/expo-github-action@v8
#         with:
#           expo-token: ${{ secrets.EXPO_TOKEN }}
#           command: eas build --profile development --platform all # Use your 'development' profile
#           working-directory: apps/expo # Adjust to your Expo app path

#       - name: Output EAS Build URLs (for QA)
#         run: |
#           # This command will output the build URLs which can be shared with QA
#           # You might need to parse the output of 'eas build' or 'eas build:list' to get exact links
#           echo "EAS Development Build Triggered. Check Expo dashboard for links."

#   run-supabase-migrations-dev:
#     runs-on: ubuntu-latest
#     environment: development
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Setup Supabase CLI
#         uses: supabase/setup-cli@v1
#         with:
#           version: latest # Or a specific version like '1.2.3'

#       - name: Set Supabase Access Token
#         run: supabase login --access-token ${{ secrets.SUPABASE_ACCESS_TOKEN }}

#       - name: Link to Development Supabase Project
#         run: supabase link --project-ref ${{ env.DEV_SUPABASE_PROJECT_ID }} --org-id ${{ secrets.SUPABASE_ORG_ID }}
#         working-directory: packages/api/supabase # Adjust path to your migrations folder

#       - name: Apply Development Database Migrations
#         # Use 'db push' for development, as it applies changes directly.
#         # For production, you'd use 'db diff' first or a more cautious approach.
#         run: supabase db push
#         working-directory: packages/api/supabase # Adjust path to your migrations folder
#         env:
#           # Ensure you pass your dev database password/connection string as needed
#           # You might need these if not using the access token method or if your migrations require it
#           PGPASSWORD: ${{ secrets.DEV_SUPABASE_DB_PASSWORD }} # Example if your setup needs it